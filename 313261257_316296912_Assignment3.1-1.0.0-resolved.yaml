---
openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/talmeri4/Assignment3.1/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/talmeri4/test3/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/talmeri4/test/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /register:
    post:
      tags:
      - Users
      summary: A new user form the client is added to the server
      description: A json object contain details about the new user
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: Wrong input parameters
  /login:
    post:
      tags:
      - Users
      summary: A client is logged-in to the server
      description: Login to the system
      requestBody:
        description: User to login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        "200":
          description: A user has been login
        "400":
          description: Wrong input parameters
  /addPlayer:
    post:
      tags:
      - Favorites
      summary: A new favorite player added to the user favorites server
      description: A json object contain details about the user's favorites players
      requestBody:
        description: Player to add to the favorites
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoritePlayer'
        required: true
      responses:
        "201":
          description: A new player has been added to the favorites
        "400":
          description: Wrong input parameters
  /addgame:
    post:
      tags:
      - Favorites
      summary: A new favorite game added to the user favorites server
      description: A json object contain details about the user's favorite games
      requestBody:
        description: Game to add to the favorites
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteGame'
        required: true
      responses:
        "201":
          description: A new game has been added to the favorites
        "400":
          description: Wrong input parameters
  /addteam:
    post:
      tags:
      - Favorites
      summary: A new favorite team added to the user favorites server
      description: A json object contain details about the user's favorite teams
      requestBody:
        description: Team to add to the favorites
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteTeam'
        required: true
      responses:
        "201":
          description: A new team has been added to the favorites
        "400":
          description: Wrong input parameters
  /viewFavoritePlayer:
    get:
      tags:
      - Favoirtes
      summary: Show all favorite players
      description: Show all favorite players from the user favorite.
      responses:
        "200":
          description: Get favorite players
          content:
            application/jason:
              schema:
                $ref: '#/components/schemas/FavoritePlayer'
        "400":
          description: Wrong input parameters
  /viewFavoriteTeam:
    get:
      tags:
      - Favoirtes
      summary: Show all favorite teams
      description: Show all favorite teams from the user favorite.
      responses:
        "200":
          description: Get favorite teams
          content:
            application/jason:
              schema:
                $ref: '#/components/schemas/FavoriteTeam'
        "400":
          description: Wrong input parameters
  /viewFavoriteGame:
    get:
      tags:
      - Favoirtes
      summary: Show all favorite games
      description: Show all favorite games from the user favorite.
      responses:
        "200":
          description: Get favorite games
          content:
            application/jason:
              schema:
                $ref: '#/components/schemas/FavoriteGame'
        "400":
          description: Wrong input parameters
  /logout:
    get:
      tags:
      - Users
      summary: A user is logout from the system
      description: Request to logout from the system.
      responses:
        "200":
          description: Logout succesfully
        "401":
          description: Must logged-in before logging-out.
  /SearchCoach/{coachname}:
    get:
      tags:
      - Search
      summary: A user is searching a coach in the system
      description: Request to search coach in the system.
      parameters:
      - name: coachname
        in: path
        description: The name of the coach
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Coach has found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewCoach'
        "400":
          description: Bad request
  /SearchPlayer/{playername}:
    get:
      tags:
      - Search
      summary: A user is searching a player in the system
      description: Request to search player in the system.
      parameters:
      - name: playername
        in: path
        description: The name of the player
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Player has found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewPlayer'
        "400":
          description: Bad request
  /SearchTeam/{teamname}:
    get:
      tags:
      - Search
      summary: A user is searching a team in the system
      description: Request to search team in the system.
      parameters:
      - name: teamname
        in: path
        description: The name of the team
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Team has found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTeam'
        "400":
          description: Bad request
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: Username contains between 3 to 8 letters only
          example: DaniM
        firstname:
          type: string
          description: User's first name
          example: Dani
        lastname:
          type: string
          description: User's last name
          example: Mer
        country:
          type: string
          description: User's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            Password conatains between 5 to 10 chars, at least one of them is number and a special char.
          format: password
          example: dani123!
        email:
          type: string
          description: User's email
          format: email
          example: daniM@gmail.com
        image-url:
          type: string
          description: URL for the user's image
          format: URL
          example: https://cloudinary.com/DaniM
      description: Model containing user info for login
    loginUser:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: Username contains between 3 to 8 letters only
          example: DaniM
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            Password conatains between 5 to 10 chars, at least one of them is number and a special char.
          format: password
          example: dani123!
      description: Model containing user info
    FavoritePlayer:
      type: object
      properties:
        playerID:
          type: integer
          description: Player's ID
          example: 2
      description: Model containing Favorite players info
    FavoriteGame:
      type: object
      properties:
        gameID:
          type: integer
          description: Game's ID
          example: 4
      description: Model containing favorite games info
    FavoriteTeam:
      type: object
      properties:
        teamID:
          type: integer
          description: Team's ID
          example: 102
      description: Model containing favorite teams info
    ViewCoach:
      type: object
      properties:
        FullName:
          type: string
          description: Coach full name
          example: Yossi Mizrahi
        TeamName:
          type: string
          description: Coach team's name
          example: Macabi
        Image:
          type: object
          description: Coach's image
      description: Model containing coach info
    ViewPlayer:
      type: object
      properties:
        FullName:
          type: string
          description: Player full name
          example: Eran Zehvi
        TeamName:
          type: string
          description: Player team's name
          example: Macabi
        Image:
          type: object
          description: Player's image
        PositionNumber:
          type: integer
          description: Player postion number
          example: 12
      description: Model containing player info
    ViewTeam:
      type: object
      properties:
        TeamName:
          type: string
          description: Name of the team
          example: Macabi
        logo:
          type: object
          description: The team's logo
      description: Model containing team info
